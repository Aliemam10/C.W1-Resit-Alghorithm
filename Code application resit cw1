#include <iostream>

#include <fstream>

#include <map>

#include <string>



// Function to save passwords to a file

void savePasswords(const std::string& username, const std::map<std::string, std::string>& passwords) {

    std::ofstream outFile(username + "_passwords.txt");

    if (outFile.is_open()) {

        for (const auto& entry : passwords) {

            outFile << entry.first << ":" << entry.second << std::endl;

        }

        outFile.close();

    }

    else {

        std::cerr << "Unable to open passwords file for writing." << std::endl;

    }

}



// Function to load passwords from a file

std::map<std::string, std::string> loadPasswords(const std::string& username) {

    std::map<std::string, std::string> passwords;

    std::ifstream inFile(username + "_passwords.txt");

    if (inFile.is_open()) {

        std::string line;

        while (std::getline(inFile, line)) {

            size_t pos = line.find(":");

            if (pos != std::string::npos) {

                std::string website = line.substr(0, pos);

                std::string password = line.substr(pos + 1);

                passwords[website] = password;

            }

        }

        inFile.close();

    }

    else {

        std::cerr << "Unable to open passwords file for reading." << std::endl;

    }

    return passwords;

}



// Function to register a new user

bool registerUser(const std::string& username, const std::string& password) {

    std::ofstream outFile("users.txt", std::ios::app);

    if (outFile.is_open()) {

        outFile << username << ":" << password << std::endl;

        outFile.close();

        return true;

    }

    return false;

}



// Function to check user login

bool loginUser(const std::string& username, const std::string& password) {

    std::ifstream inFile("users.txt");

    if (inFile.is_open()) {

        std::string line;

        while (std::getline(inFile, line)) {

            size_t pos = line.find(":");

            if (pos != std::string::npos) {

                std::string storedUsername = line.substr(0, pos);

                std::string storedPassword = line.substr(pos + 1);

                if (storedUsername == username && storedPassword == password) {

                    return true;

                }

            }

        }

        inFile.close();

    }

    return false;

}



int main() {

    std::string username;

    std::string password;



    std::cout << "1. Register\n2. Login\nEnter your choice: ";

    int choice;

    std::cin >> choice;



    if (choice == 1) {

        std::cout << "Enter new username: ";

        std::cin >> username;

        std::cout << "Enter new password: ";

        std::cin >> password;

        if (registerUser(username, password)) {

            std::cout << "User registered successfully." << std::endl;

        } else {

            std::cout << "User registration failed." << std::endl;

            return 1;

        }

    } else if (choice == 2) {

        std::cout << "Enter username: ";

        std::cin >> username;

        std::cout << "Enter password: ";

        std::cin >> password;

        if (!loginUser(username, password)) {

            std::cout << "Invalid username or password." << std::endl;

            return 1;

        }

    } else {

        std::cout << "Invalid choice." << std::endl;

        return 1;

    }



    std::map<std::string, std::string> passwords = loadPasswords(username);



    while (true) {

        std::cout << "\nPassword Manager Menu:" << std::endl;

        std::cout << "1. Add Password" << std::endl;

        std::cout << "2. Retrieve Password" << std::endl;

        std::cout << "3. Modify Password" << std::endl;

        std::cout << "4. Delete Password" << std::endl;

        std::cout << "5. Exit" << std::endl;



        std::cout << "Enter your choice: ";

        std::cin >> choice;



        if (choice == 1) {

            std::string website, password;

            std::cout << "Enter website name: ";

            std::cin >> website;

            std::cout << "Enter password: ";

            std::cin >> password;

            passwords[website] = password;

            savePasswords(username, passwords);

            std::cout << "Password added successfully." << std::endl;

        }

        else if (choice == 2) {

            std::string website;

            std::cout << "Enter website name: ";

            std::cin >> website;

            if (passwords.find(website) != passwords.end()) {

                std::cout << "Password for " << website << " is: " << passwords[website] << std::endl;

            }

            else {

                std::cout << "Password not found for " << website << "." << std::endl;

            }

        }

        else if (choice == 3) {

            std::string website, newPassword;

            std::cout << "Enter website name: ";

            std::cin >> website;

            if (passwords.find(website) != passwords.end()) {

                std::cout << "Enter new password: ";

                std::cin >> newPassword;

                passwords[website] = newPassword;

                savePasswords(username, passwords);

                std::cout << "Password updated successfully." << std::endl;

            }

            else {

                std::cout << "Password not found for " << website << "." << std::endl;

            }

        }

        else if (choice == 4) {

            std::string website;

            std::cout << "Enter website name: ";

            std::cin >> website;

            if (passwords.erase(website)) {

                savePasswords(username, passwords);

                std::cout << "Password deleted successfully." << std::endl;

            }

            else {

                std::cout << "Password not found for " << website << "." << std::endl;

            }

        }

        else if (choice == 5) {

            std::cout << "Exiting Password Manager. Goodbye!" << std::endl;

            break;

        }

        else {

            std::cout << "Invalid choice. Please enter a valid option." << std::endl;

        }

    }



    return 0;

}

